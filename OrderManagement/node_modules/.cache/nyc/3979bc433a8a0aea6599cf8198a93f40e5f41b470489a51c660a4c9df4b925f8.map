{"version":3,"sources":["order-management.spec.js"],"names":["path","require","env","bluebird","config","process","MONGO_TESTDB","console","log","model","mongoose","Order","chai","chaiHttp","sinon","sinonTest","test","app","should","expect","supertest","viewOrders","mongo","use","describe","beforeEach","done","remove","err","it","request","get","end","res","have","status","body","be","a","order","name","type","quantity","price","orderId","city","restaurentId","post","send","data","property"],"mappings":"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","sourceRoot":"C:\\Users\\m1048223\\Documents\\repoNode301\\nodejs301RepoProject\\OrderManagement\\src\\app\\test","sourcesContent":["const path = require('path')\r\nconst env = require('dotenv/config');\r\nconst bluebird = require('bluebird');\r\nconst config = process.env.MONGO_TESTDB;\r\nconsole.log(\"2222\" ,config);\r\n // process.env.MongoUrl = \"mongodb://localhost/OrderManagement\";\r\nconsole.log(\"444444\" ,config);\r\n// import * as http from 'http';                    //need to implement\r\n// import '../model/order-model';\r\nconst model = require('../model/order-model');\r\nlet mongoose = require(\"mongoose\");\r\nlet Order = mongoose.model(\"Order\")\r\n//Require the dev-dependencies\r\nlet chai = require('chai');\r\nlet chaiHttp = require('chai-http');\r\nvar sinon = require('sinon');\r\nvar sinonTest = require('sinon-test');\r\nvar test = sinonTest(sinon);\r\n// import app from '../../app';\r\nconst app = require('../../app');\r\n\r\nlet should = chai.should();\r\nconst expect = chai.expect;\r\nconst supertest = require('supertest');\r\nconst viewOrders = require('../controllers/view-orders');\r\nconst mongo = require('mongoose');\r\n// import {viewOrders} from '../controllers/view-orders';\r\n// import { mongo } from 'mongoose';\r\n\r\n\r\n\r\nchai.use(chaiHttp);\r\n//Our parent block\r\ndescribe('Order', () => {\r\n    beforeEach((done) => { //Before each test we empty the database\r\n        Order.remove({}, (err) => { \r\n           done();         \r\n        });     \r\n    });\r\n});\r\n\r\ndescribe('GET/vieworders', () => {\r\n   it('it should GET all the Order', (done) => {\r\n      chai.request(app)\r\n          .get('/vieworders')\r\n          .end((err, res) => {\r\n               // console.log(res);\r\n               res.should.have.status(200);\r\n               res.body.should.be.a('array');\r\n              // res.body.length.should.be.eql(0);\r\n            done();\r\n          });\r\n    });\r\n});\r\n\r\n\r\ndescribe('/POST /placeorder', () => {\r\n    it('it should Create a order', (done) => {\r\n      let order = {\r\n        name: \"pasta\",\r\n        type: \"italie food\",\r\n        quantity: 9,\r\n        price: 500,\r\n        orderId: 3,\r\n        city: \"Bangalore\",\r\n        restaurentId: \"5df5a6faf59998720c390e27\"\r\n    }\r\n\r\n      chai.request(app)\r\n          .post('/placeorder')\r\n          .send(order)\r\n          .end((err, res) => {\r\n              //console.log(res)\r\n              res.should.have.status(200);\r\n              res.body.should.be.a('object');\r\n              \r\n              res.body.data.should.have.property('name');\r\n              res.body.data.should.have.property('restaurentId');\r\n            //    res.body.should.have.property('name').eql('TEST-123');\r\n            //   res.body.should.have.property('budget').eql(250);\r\n              \r\n\r\n            done();\r\n          });\r\n    });\r\n\r\n});\r\n\r\n// deleteeeeeeeeeeeeeeeeeeeeeeee\r\ndescribe('/Delete/cancelorder', () => {\r\n  it('it should Delete order', (done) => {\r\n    let order = {\r\n      name: \"pasta\",\r\n      type: \"italie food\",\r\n      quantity: 9,\r\n      price: 500,\r\n      orderId: 3,\r\n      city: \"Bangalore\",\r\n      restaurentId: \"5df5a6faf59998720c390e27\"\r\n  }\r\n\r\n    chai.request(app)\r\n        .delete('/cancelorder')\r\n        .send(order)\r\n        .end((err, res) => {\r\n            console.log(res)\r\n            res.should.have.status(200);\r\n            res.body.should.be.a('object');\r\n            res.body.data.should.have.property('name');\r\n            res.body.data.should.have.property('restaurentId');            \r\n\r\n          done();\r\n        });\r\n  });\r\n\r\n});"]}